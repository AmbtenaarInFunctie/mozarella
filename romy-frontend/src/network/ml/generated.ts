/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Root */
        get: operations["root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health Check */
        get: operations["health_check_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Process Query */
        post: operations["process_query_query_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/history/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Conversation History
         * @description Get conversation history for a specific user/thread ID.
         *
         *     The history is stored in-memory and contains up to the last 10 messages
         *     for each user (5 user messages and 5 assistant responses).
         *     Citations are included in assistant messages when available.
         */
        get: operations["get_conversation_history_history__user_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * Citation
         * @description Represents a citation to a support document
         */
        Citation: {
            /** Document Id */
            document_id: string;
            /** Document Title */
            document_title: string;
            /** Document Original Url */
            document_original_url: string;
            /** Document Domain */
            document_domain: string;
            /** Document Number */
            document_number: number;
            /** Relevance Score */
            relevance_score?: number | null;
        };
        /**
         * ConversationHistoryResponse
         * @description Response model for conversation history
         */
        ConversationHistoryResponse: {
            /** User Id */
            user_id: string;
            /** Messages */
            messages: components["schemas"]["Message"][];
            /** Total Messages */
            total_messages: number;
            /**
             * Status
             * @default success
             */
            status: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * Message
         * @description Represents a single message in conversation history
         */
        Message: {
            /** Role */
            role: string;
            /** Content */
            content: string;
            /** Citations */
            citations?: components["schemas"]["Citation"][] | null;
        };
        /**
         * QueryRequest
         * @description Request model for query
         */
        QueryRequest: {
            /** Query */
            query: string;
        };
        /**
         * QueryResponse
         * @description Response model for query
         */
        QueryResponse: {
            /** Response */
            response: unknown;
            /** Citations */
            citations?: {
                [key: string]: unknown;
            }[] | null;
            /**
             * Status
             * @default success
             */
            status: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    health_check_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    process_query_query_post: {
        parameters: {
            query?: never;
            header?: {
                "x-user-id"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QueryRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QueryResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_conversation_history_history__user_id__get: {
        parameters: {
            query: {
                x_user_id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConversationHistoryResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
